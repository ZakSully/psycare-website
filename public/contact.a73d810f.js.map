{"mappings":"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","sources":["<anon>","js/forms.js"],"sourcesContent":["// Form handling utilities\nconst API_URL = '/api/email-handler.php';\nclass FormHandler {\n    setupForm() {\n        this.form.addEventListener('submit', this.handleSubmit.bind(this));\n        this.setupValidation();\n    }\n    setupValidation() {\n        const inputs = this.form.querySelectorAll('input, textarea');\n        inputs.forEach((input)=>{\n            input.addEventListener('blur', ()=>this.validateField(input));\n            input.addEventListener('input', ()=>this.clearFieldError(input));\n        });\n    }\n    validateField(field) {\n        this.clearFieldError(field);\n        if (field.required && !field.value.trim()) {\n            this.showFieldError(field, 'This field is required');\n            return false;\n        }\n        if (field.type === 'email' && field.value) {\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n            if (!emailRegex.test(field.value)) {\n                this.showFieldError(field, 'Please enter a valid email address');\n                return false;\n            }\n        }\n        if (field.type === 'tel' && field.value) {\n            const phoneRegex = /^\\+?[\\d\\s-()]{10,}$/;\n            if (!phoneRegex.test(field.value)) {\n                this.showFieldError(field, 'Please enter a valid phone number');\n                return false;\n            }\n        }\n        return true;\n    }\n    showFieldError(field, message) {\n        field.classList.add('error');\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'error-message';\n        errorDiv.textContent = message;\n        field.parentNode.appendChild(errorDiv);\n    }\n    clearFieldError(field) {\n        field.classList.remove('error');\n        const errorMessage = field.parentNode.querySelector('.error-message');\n        if (errorMessage) errorMessage.remove();\n    }\n    validateForm() {\n        const fields = this.form.querySelectorAll('input, textarea');\n        let isValid = true;\n        fields.forEach((field)=>{\n            if (!this.validateField(field)) isValid = false;\n        });\n        return isValid;\n    }\n    showFormMessage(type, message) {\n        const alertDiv = document.createElement('div');\n        alertDiv.className = `alert alert-${type}`;\n        alertDiv.textContent = message;\n        const existingAlert = this.form.querySelector('.alert');\n        if (existingAlert) existingAlert.remove();\n        this.form.insertBefore(alertDiv, this.form.firstChild);\n        if (type === 'success') setTimeout(()=>{\n            alertDiv.remove();\n            this.form.reset();\n        }, 5000);\n    }\n    setLoading(isLoading) {\n        if (isLoading) {\n            this.submitButton.disabled = true;\n            const spinner = document.createElement('span');\n            spinner.className = 'spinner';\n            this.submitButton.prepend(spinner);\n            this.submitButton.dataset.originalText = this.submitButton.textContent;\n            this.submitButton.textContent = 'Sending...';\n        } else {\n            this.submitButton.disabled = false;\n            const spinner = this.submitButton.querySelector('.spinner');\n            if (spinner) spinner.remove();\n            if (this.submitButton.dataset.originalText) this.submitButton.textContent = this.submitButton.dataset.originalText;\n        }\n    }\n    async getReCaptchaToken() {\n        try {\n            return await grecaptcha.execute(window.recaptchaSiteKey, {\n                action: 'submit'\n            });\n        } catch (error) {\n            console.error('reCAPTCHA error:', error);\n            return null;\n        }\n    }\n    async handleSubmit(event) {\n        event.preventDefault();\n        if (!this.validateForm()) return;\n        this.setLoading(true);\n        try {\n            const formData = new FormData(this.form);\n            const recaptchaToken = await this.getReCaptchaToken();\n            if (!recaptchaToken) throw new Error('Failed to get reCAPTCHA token');\n            const response = await fetch('http://localhost:3000/api/submit-form', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({\n                    email: formData.get('email'),\n                    formType: this.formType,\n                    recaptchaToken: recaptchaToken\n                })\n            });\n            if (!response.ok) {\n                const data = await response.json();\n                throw new Error(data.message || 'Failed to send message');\n            }\n            const data = await response.json();\n            this.showFormMessage('success', 'Thank you! Your message has been sent successfully.');\n            this.form.reset();\n        } catch (error) {\n            console.error('Form submission error:', error);\n            this.showFormMessage('error', error.message || 'An error occurred. Please try again later.');\n        } finally{\n            this.setLoading(false);\n        }\n    }\n    constructor(formElement){\n        this.form = formElement;\n        this.submitButton = this.form.querySelector('button[type=\"submit\"]');\n        this.formType = this.form.dataset.formType;\n        this.setupForm();\n    }\n}\n// Initialize all forms on the page\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    const forms = document.querySelectorAll('form[data-form-type]');\n    forms.forEach((form)=>new FormHandler(form));\n});\n\n//# sourceMappingURL=contact.a73d810f.js.map\n","// Form handling utilities\nconst API_URL = '/api/email-handler.php';\n\nclass FormHandler {\n    constructor(formElement) {\n        this.form = formElement;\n        this.submitButton = this.form.querySelector('button[type=\"submit\"]');\n        this.formType = this.form.dataset.formType;\n        this.setupForm();\n    }\n\n    setupForm() {\n        this.form.addEventListener('submit', this.handleSubmit.bind(this));\n        this.setupValidation();\n    }\n\n    setupValidation() {\n        const inputs = this.form.querySelectorAll('input, textarea');\n        inputs.forEach(input => {\n            input.addEventListener('blur', () => this.validateField(input));\n            input.addEventListener('input', () => this.clearFieldError(input));\n        });\n    }\n\n    validateField(field) {\n        this.clearFieldError(field);\n\n        if (field.required && !field.value.trim()) {\n            this.showFieldError(field, 'This field is required');\n            return false;\n        }\n\n        if (field.type === 'email' && field.value) {\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n            if (!emailRegex.test(field.value)) {\n                this.showFieldError(field, 'Please enter a valid email address');\n                return false;\n            }\n        }\n\n        if (field.type === 'tel' && field.value) {\n            const phoneRegex = /^\\+?[\\d\\s-()]{10,}$/;\n            if (!phoneRegex.test(field.value)) {\n                this.showFieldError(field, 'Please enter a valid phone number');\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    showFieldError(field, message) {\n        field.classList.add('error');\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'error-message';\n        errorDiv.textContent = message;\n        field.parentNode.appendChild(errorDiv);\n    }\n\n    clearFieldError(field) {\n        field.classList.remove('error');\n        const errorMessage = field.parentNode.querySelector('.error-message');\n        if (errorMessage) {\n            errorMessage.remove();\n        }\n    }\n\n    validateForm() {\n        const fields = this.form.querySelectorAll('input, textarea');\n        let isValid = true;\n\n        fields.forEach(field => {\n            if (!this.validateField(field)) {\n                isValid = false;\n            }\n        });\n\n        return isValid;\n    }\n\n    showFormMessage(type, message) {\n        const alertDiv = document.createElement('div');\n        alertDiv.className = `alert alert-${type}`;\n        alertDiv.textContent = message;\n\n        const existingAlert = this.form.querySelector('.alert');\n        if (existingAlert) {\n            existingAlert.remove();\n        }\n\n        this.form.insertBefore(alertDiv, this.form.firstChild);\n\n        if (type === 'success') {\n            setTimeout(() => {\n                alertDiv.remove();\n                this.form.reset();\n            }, 5000);\n        }\n    }\n\n    setLoading(isLoading) {\n        if (isLoading) {\n            this.submitButton.disabled = true;\n            const spinner = document.createElement('span');\n            spinner.className = 'spinner';\n            this.submitButton.prepend(spinner);\n            this.submitButton.dataset.originalText = this.submitButton.textContent;\n            this.submitButton.textContent = 'Sending...';\n        } else {\n            this.submitButton.disabled = false;\n            const spinner = this.submitButton.querySelector('.spinner');\n            if (spinner) {\n                spinner.remove();\n            }\n            if (this.submitButton.dataset.originalText) {\n                this.submitButton.textContent = this.submitButton.dataset.originalText;\n            }\n        }\n    }\n\n    async getReCaptchaToken() {\n        try {\n            return await grecaptcha.execute(window.recaptchaSiteKey, { action: 'submit' });\n        } catch (error) {\n            console.error('reCAPTCHA error:', error);\n            return null;\n        }\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n\n        if (!this.validateForm()) {\n            return;\n        }\n\n        this.setLoading(true);\n\n        try {\n            const formData = new FormData(this.form);\n            const recaptchaToken = await this.getReCaptchaToken();\n\n            if (!recaptchaToken) {\n                throw new Error('Failed to get reCAPTCHA token');\n            }\n\n            const response = await fetch('http://localhost:3000/api/submit-form', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                body: JSON.stringify({\n                    email: formData.get('email'),\n                    formType: this.formType,\n                    recaptchaToken: recaptchaToken\n                })\n            });\n\n            if (!response.ok) {\n                const data = await response.json();\n                throw new Error(data.message || 'Failed to send message');\n            }\n\n            const data = await response.json();\n            this.showFormMessage('success', 'Thank you! Your message has been sent successfully.');\n            this.form.reset();\n        } catch (error) {\n            console.error('Form submission error:', error);\n            this.showFormMessage('error', error.message || 'An error occurred. Please try again later.');\n        } finally {\n            this.setLoading(false);\n        }\n    }\n}\n\n// Initialize all forms on the page\ndocument.addEventListener('DOMContentLoaded', () => {\n    const forms = document.querySelectorAll('form[data-form-type]');\n    forms.forEach(form => new FormHandler(form));\n}); "],"names":["FormHandler","setupForm","form","addEventListener","handleSubmit","bind","setupValidation","inputs","querySelectorAll","forEach","input","validateField","clearFieldError","field","required","value","trim","showFieldError","type","emailRegex","test","phoneRegex","message","classList","add","errorDiv","document","createElement","className","textContent","parentNode","appendChild","remove","errorMessage","querySelector","validateForm","fields","isValid","showFormMessage","alertDiv","existingAlert","insertBefore","firstChild","setTimeout","reset","setLoading","isLoading","submitButton","disabled","spinner","prepend","dataset","originalText","getReCaptchaToken","grecaptcha","execute","window","recaptchaSiteKey","action","error","console","event","preventDefault","formData","FormData","recaptchaToken","Error","response","fetch","method","headers","body","JSON","stringify","email","get","formType","ok","data","json","constructor","formElement","forms"],"version":3,"file":"contact.a73d810f.js.map"}