{"mappings":"ACAA,SAAS,gBAAgB,CAAC,mBAAoB,KAE1C,IAAM,EAAgB,SAAS,gBAAgB,CAAC,kBAC1C,EAAe,SAAS,gBAAgB,CAAC,iBAGzC,EAAe,IAAI,qBAAqB,AAAC,IAC3C,EAAQ,OAAO,CAAC,AAAA,IACR,EAAM,cAAc,GACpB,EAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAG,IAC7B,EAAM,MAAM,CAAC,KAAK,CAAC,SAAS,CAAG,gBAC/B,EAAa,SAAS,CAAC,EAAM,MAAM,EAE3C,EACJ,EAAG,CACC,UAAW,GACX,WAAY,KAChB,GAGM,EAAkB,IAAI,qBAAqB,AAAC,IAC9C,EAAQ,OAAO,CAAC,AAAA,IACR,EAAM,cAAc,GACpB,EAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAG,IAC7B,EAAM,MAAM,CAAC,KAAK,CAAC,SAAS,CAAG,gBAC/B,EAAgB,SAAS,CAAC,EAAM,MAAM,EAE9C,EACJ,EAAG,CACC,UAAW,GACX,WAAY,KAChB,GAGA,EAAc,OAAO,CAAC,AAAA,IAClB,EAAK,KAAK,CAAC,OAAO,CAAG,IACrB,EAAK,KAAK,CAAC,SAAS,CAAG,mBACvB,EAAK,KAAK,CAAC,UAAU,CAAG,oBACxB,EAAa,OAAO,CAAC,GAGrB,EAAK,gBAAgB,CAAC,QAAS,KAC3B,EAAc,OAAO,CAAC,AAAA,GAAK,EAAE,SAAS,CAAC,MAAM,CAAC,WAC9C,EAAK,SAAS,CAAC,GAAG,CAAC,SACvB,EACJ,GAGA,EAAa,OAAO,CAAC,CAAC,EAAM,KACxB,EAAK,KAAK,CAAC,OAAO,CAAG,IACrB,EAAK,KAAK,CAAC,SAAS,CAAG,oBACvB,EAAK,KAAK,CAAC,UAAU,CAAG,oBACxB,EAAK,KAAK,CAAC,eAAe,CAAG,CAAA,EAAG,AAAQ,GAAR,EAAY,CAAC,CAAC,CAC9C,EAAgB,OAAO,CAAC,EAC5B,GAGA,EAAc,OAAO,CAAC,AAAA,IAClB,EAAK,gBAAgB,CAAC,aAAc,KAChC,IAAM,EAAO,EAAK,aAAa,CAAC,kBAC5B,GACA,CAAA,EAAK,KAAK,CAAC,SAAS,CAAG,yBAD3B,CAGJ,GAEA,EAAK,gBAAgB,CAAC,aAAc,KAChC,IAAM,EAAO,EAAK,aAAa,CAAC,kBAC5B,GACA,CAAA,EAAK,KAAK,CAAC,SAAS,CAAG,uBAD3B,CAGJ,EACJ,GAIA,AADmB,SAAS,gBAAgB,CAAC,eAClC,OAAO,CAAC,AAAA,IACf,EAAO,gBAAgB,CAAC,QAAS,AAAC,IAC9B,EAAE,cAAc,GAChB,IAAM,EAAO,EAAO,YAAY,CAAC,QACjC,GAAI,GAEA,GAAI,EAAK,UAAU,CAAC,KAAM,CACtB,IAAM,EAAgB,SAAS,aAAa,CAAC,GACzC,GACA,EAAc,cAAc,CAAC,CAAE,SAAU,QAAS,EAE1D,MAEI,OAAO,QAAQ,CAAC,IAAI,CAAG,EAGnC,EACJ,EACJ","sources":["<anon>","js/solutions.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', ()=>{\n    // Initialize solution cards\n    const solutionCards = document.querySelectorAll('.solution-card');\n    const featureItems = document.querySelectorAll('.feature-item');\n    // Intersection Observer for solution cards\n    const cardObserver = new IntersectionObserver((entries)=>{\n        entries.forEach((entry)=>{\n            if (entry.isIntersecting) {\n                entry.target.style.opacity = '1';\n                entry.target.style.transform = 'translateY(0)';\n                cardObserver.unobserve(entry.target);\n            }\n        });\n    }, {\n        threshold: 0.2,\n        rootMargin: '0px'\n    });\n    // Intersection Observer for feature items\n    const featureObserver = new IntersectionObserver((entries)=>{\n        entries.forEach((entry)=>{\n            if (entry.isIntersecting) {\n                entry.target.style.opacity = '1';\n                entry.target.style.transform = 'translateX(0)';\n                featureObserver.unobserve(entry.target);\n            }\n        });\n    }, {\n        threshold: 0.2,\n        rootMargin: '0px'\n    });\n    // Set initial styles and observe solution cards\n    solutionCards.forEach((card)=>{\n        card.style.opacity = '0';\n        card.style.transform = 'translateY(20px)';\n        card.style.transition = 'all 0.6s ease-out';\n        cardObserver.observe(card);\n        // Add click handler for cards\n        card.addEventListener('click', ()=>{\n            solutionCards.forEach((c)=>c.classList.remove('active'));\n            card.classList.add('active');\n        });\n    });\n    // Set initial styles and observe feature items\n    featureItems.forEach((item, index)=>{\n        item.style.opacity = '0';\n        item.style.transform = 'translateX(-20px)';\n        item.style.transition = 'all 0.4s ease-out';\n        item.style.transitionDelay = `${index * 0.1}s`;\n        featureObserver.observe(item);\n    });\n    // Add hover effect for solution cards\n    solutionCards.forEach((card)=>{\n        card.addEventListener('mouseenter', ()=>{\n            const icon = card.querySelector('.solution-icon');\n            if (icon) icon.style.transform = 'scale(1.1) rotate(5deg)';\n        });\n        card.addEventListener('mouseleave', ()=>{\n            const icon = card.querySelector('.solution-icon');\n            if (icon) icon.style.transform = 'scale(1) rotate(0deg)';\n        });\n    });\n    // Add click handler for CTA buttons\n    const ctaButtons = document.querySelectorAll('.cta-button');\n    ctaButtons.forEach((button)=>{\n        button.addEventListener('click', (e)=>{\n            e.preventDefault();\n            const href = button.getAttribute('href');\n            if (href) {\n                // Smooth scroll to section if it's an anchor link\n                if (href.startsWith('#')) {\n                    const targetSection = document.querySelector(href);\n                    if (targetSection) targetSection.scrollIntoView({\n                        behavior: 'smooth'\n                    });\n                } else // Navigate to external link\n                window.location.href = href;\n            }\n        });\n    });\n});\n\n//# sourceMappingURL=index.dab6af68.js.map\n","document.addEventListener('DOMContentLoaded', () => {\n    // Initialize solution cards\n    const solutionCards = document.querySelectorAll('.solution-card');\n    const featureItems = document.querySelectorAll('.feature-item');\n\n    // Intersection Observer for solution cards\n    const cardObserver = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.style.opacity = '1';\n                entry.target.style.transform = 'translateY(0)';\n                cardObserver.unobserve(entry.target);\n            }\n        });\n    }, {\n        threshold: 0.2,\n        rootMargin: '0px'\n    });\n\n    // Intersection Observer for feature items\n    const featureObserver = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.style.opacity = '1';\n                entry.target.style.transform = 'translateX(0)';\n                featureObserver.unobserve(entry.target);\n            }\n        });\n    }, {\n        threshold: 0.2,\n        rootMargin: '0px'\n    });\n\n    // Set initial styles and observe solution cards\n    solutionCards.forEach(card => {\n        card.style.opacity = '0';\n        card.style.transform = 'translateY(20px)';\n        card.style.transition = 'all 0.6s ease-out';\n        cardObserver.observe(card);\n\n        // Add click handler for cards\n        card.addEventListener('click', () => {\n            solutionCards.forEach(c => c.classList.remove('active'));\n            card.classList.add('active');\n        });\n    });\n\n    // Set initial styles and observe feature items\n    featureItems.forEach((item, index) => {\n        item.style.opacity = '0';\n        item.style.transform = 'translateX(-20px)';\n        item.style.transition = 'all 0.4s ease-out';\n        item.style.transitionDelay = `${index * 0.1}s`;\n        featureObserver.observe(item);\n    });\n\n    // Add hover effect for solution cards\n    solutionCards.forEach(card => {\n        card.addEventListener('mouseenter', () => {\n            const icon = card.querySelector('.solution-icon');\n            if (icon) {\n                icon.style.transform = 'scale(1.1) rotate(5deg)';\n            }\n        });\n\n        card.addEventListener('mouseleave', () => {\n            const icon = card.querySelector('.solution-icon');\n            if (icon) {\n                icon.style.transform = 'scale(1) rotate(0deg)';\n            }\n        });\n    });\n\n    // Add click handler for CTA buttons\n    const ctaButtons = document.querySelectorAll('.cta-button');\n    ctaButtons.forEach(button => {\n        button.addEventListener('click', (e) => {\n            e.preventDefault();\n            const href = button.getAttribute('href');\n            if (href) {\n                // Smooth scroll to section if it's an anchor link\n                if (href.startsWith('#')) {\n                    const targetSection = document.querySelector(href);\n                    if (targetSection) {\n                        targetSection.scrollIntoView({ behavior: 'smooth' });\n                    }\n                } else {\n                    // Navigate to external link\n                    window.location.href = href;\n                }\n            }\n        });\n    });\n}); "],"names":["document","addEventListener","solutionCards","querySelectorAll","featureItems","cardObserver","IntersectionObserver","entries","forEach","entry","isIntersecting","target","style","opacity","transform","unobserve","threshold","rootMargin","featureObserver","card","transition","observe","c","classList","remove","add","item","index","transitionDelay","icon","querySelector","ctaButtons","button","e","preventDefault","href","getAttribute","startsWith","targetSection","scrollIntoView","behavior","window","location"],"version":3,"file":"index.dab6af68.js.map"}