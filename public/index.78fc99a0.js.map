{"mappings":"ACAA,SAAS,gBAAgB,CAAC,mBAAoB,WAE1C,IAAM,EAAW,IAAI,qBAAqB,AAAC,IACvC,EAAQ,OAAO,CAAC,AAAA,IACR,EAAM,cAAc,GACpB,EAAM,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,QAGvB,EAAM,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,gBAChC,AAoBhB,SAAuB,CAAO,EAC1B,IAAM,EAAQ,SAAS,EAAQ,OAAO,CAAC,KAAK,EACxC,EAAU,EACR,EAAY,EAAQ,GACpB,EAAW,YAAY,KAErB,AADJ,CAAA,GAAW,CAAX,GACe,GACX,EAAQ,WAAW,CAAG,CAAA,EAAG,EAAM,CAAC,CAAC,CACjC,cAAc,IAEd,EAAQ,WAAW,CAAG,CAAA,EAAG,KAAK,KAAK,CAAC,GAAS,CAAC,CAAC,AAEvD,EAAG,GACP,EAjC8B,EAAM,MAAM,EAGtC,EACJ,EAAG,CACC,UAAW,GACX,WAAY,KAChB,GAGA,SAAS,gBAAgB,CAAC,sBAAsB,OAAO,CAAC,AAAC,IACrD,EAAS,OAAO,CAAC,EACrB,GAGA,SAAS,gBAAgB,CAAC,gBAAgB,OAAO,CAAC,AAAC,IAC/C,EAAS,OAAO,CAAC,EACrB,EAiBJ","sources":["<anon>","js/scroll-animations.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\n    // Create the observer\n    const observer = new IntersectionObserver((entries)=>{\n        entries.forEach((entry)=>{\n            if (entry.isIntersecting) {\n                entry.target.classList.add('show');\n                // Handle stat number animation if it's a stat\n                if (entry.target.classList.contains('stat-number')) animateNumber(entry.target);\n            }\n        });\n    }, {\n        threshold: 0.1,\n        rootMargin: '0px'\n    });\n    // Observe all elements with animate-on-scroll class\n    document.querySelectorAll('.animate-on-scroll').forEach((element)=>{\n        observer.observe(element);\n    });\n    // Observe stat numbers\n    document.querySelectorAll('.stat-number').forEach((element)=>{\n        observer.observe(element);\n    });\n    // Number animation function\n    function animateNumber(element) {\n        const value = parseInt(element.dataset.value);\n        let current = 0;\n        const increment = value / 50; // Adjust for animation speed\n        const interval = setInterval(()=>{\n            current += increment;\n            if (current >= value) {\n                element.textContent = `${value}%`;\n                clearInterval(interval);\n            } else element.textContent = `${Math.floor(current)}%`;\n        }, 20);\n    }\n});\n\n//# sourceMappingURL=index.78fc99a0.js.map\n","document.addEventListener('DOMContentLoaded', function() {\n    // Create the observer\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.classList.add('show');\n                \n                // Handle stat number animation if it's a stat\n                if (entry.target.classList.contains('stat-number')) {\n                    animateNumber(entry.target);\n                }\n            }\n        });\n    }, {\n        threshold: 0.1,\n        rootMargin: '0px'\n    });\n\n    // Observe all elements with animate-on-scroll class\n    document.querySelectorAll('.animate-on-scroll').forEach((element) => {\n        observer.observe(element);\n    });\n\n    // Observe stat numbers\n    document.querySelectorAll('.stat-number').forEach((element) => {\n        observer.observe(element);\n    });\n\n    // Number animation function\n    function animateNumber(element) {\n        const value = parseInt(element.dataset.value);\n        let current = 0;\n        const increment = value / 50; // Adjust for animation speed\n        const interval = setInterval(() => {\n            current += increment;\n            if (current >= value) {\n                element.textContent = `${value}%`;\n                clearInterval(interval);\n            } else {\n                element.textContent = `${Math.floor(current)}%`;\n            }\n        }, 20);\n    }\n}); "],"names":["document","addEventListener","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","contains","animateNumber","element","value","parseInt","dataset","current","increment","interval","setInterval","textContent","clearInterval","Math","floor","threshold","rootMargin","querySelectorAll","observe"],"version":3,"file":"index.78fc99a0.js.map"}